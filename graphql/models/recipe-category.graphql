"Type of the food recipe."
type RecipeCategory {
    "Unique primary key."
    id: ID!

    "Category name."
    name: String!

    "List of recipes that belong to a specific category."
    recipes: [Recipe!]! @belongsToMany(type: PAGINATOR, defaultCount: 25)

    "When the category was created."
    created_at: DateTime!

    "When the category was last updated."
    updated_at: DateTime!
}

extend type Query {
    "List multiple recipe categories."
    recipeCategories: [RecipeCategory!]! @paginate(defaultCount: 25)

    "Find a single recipe category by primary key."
    recipeCategory(id: ID! @eq): RecipeCategory @find
}

"An object with fields for creating new recipe category."
input CreateRecipeCategoryInput {
    "A unique string with length between 3 and 255 characters."
    name: String! @trim @rules(apply: ["string", "min:3", "max:255", "unique:recipe_categories,name"], attribute: "name")
}

"An object with fields for updating recipe category."
input UpdateRecipeCategoryInput @validator {
    "Primary key of existing recipe category."
    id: ID!
    "A unique string with length between 3 and 255 characters."
    name: String! @trim
}

extend type Mutation {
    "Create new recipe category."
    createRecipeCategory(input: CreateRecipeCategoryInput! @spread): RecipeCategory! @create
    "Update existing recipe category."
    updateRecipeCategory(input: UpdateRecipeCategoryInput! @spread): RecipeCategory! @update
    "Delete recipe category."
    deleteRecipeCategory(id: ID!): RecipeCategory! @delete
}
